- hosts: all
  become: true
  
  vars:
    # Default variables
    docker_maintenance_tasks: true
    docker_user: "docker_janitor"
    docker_prune_crontime: "30 8 * * 1,6"

  tasks:
  - name: "Create Docker Group"
    group:
      name: docker
      system: true
    when: docker_maintenance_tasks | bool
  - name: "Create Docker Cleanup user"
    user:
      name: "{{ docker_user }}"
      group: docker
      shell: /bin/false
      system: true
      create_home: false
    when: docker_maintenance_tasks | bool
  - name: "Create cronjob: docker_prune"
    copy:
      dest: /etc/cron.d/docker_prune
      mode: "0644"
      owner: root
      group: root
      content: "{{ docker_prune_crontime }} {{ docker_user }} /usr/bin/docker system prune --all --force --volumes"
    when: docker_maintenance_tasks | bool

- hosts: all
  become: true

  tasks:
  - name: "Install prerequisite apt packages"
    apt:
      package:
      - curl
      - ca-certificates
      - software-properties-common
      - apt-transport-https
  - name: "Install packages-microsoft-prod deb package"
    apt:
      deb: "https://packages.microsoft.com/config/{{ ansible_distribution | lower }}/{{ ansible_distribution_version }}/packages-microsoft-prod.deb"
  - name: "Add ansible PPA Repository"
    apt_repository:
      repo: "ppa:ansible/ansible"
  - name: "Add yq PPA Repository"
    apt_repository:
      repo: "ppa:rmescandon/yq"
  - name: "Update Apt Cache"
    apt:
      update_cache: true
      upgrade: true
  - name: "Add universe Apt Repository"
    shell:
      cmd: "add-apt-repository universe"
    args:
      warn: false

  - name: "Install azure-cli"
    shell:
      cmd: "curl -sL https://aka.ms/InstallAzureCLIDeb | bash"
      creates: /usr/bin/az
    args:
      warn: false
  - name: "Install kubectl"
    shell:
      cmd: "az aks install-cli"
      creates: /usr/local/bin/kubectl
  - name: "Install tools through apt"
    apt:
      update_cache: true
      package: 
      - git
      - docker.io
      - ansible
      - powershell
      - zip
      - yq
      - jq
      - bats

- hosts: all
  become: true
  
  vars:
    # Default variables
    azdo_agent_install: false
    azdo_agent_user: "azdo"
    azdo_agent_agent_version: "2.164.6"
    azdo_agent_agent_pool: "Default"

    # Unset variables
    # azdo_agent_organization: "" # Set with `-e azdo_agent_organization=myOrg` or `-e @varFile.yml`
    # azdo_agent_token: ""        # This should be provided in a vault file / secret

    # Generated variables
    azdo_agent_organization_url: "https://dev.azure.com/{{ azdo_agent_organization }}"

  tasks:
  - name: "Create AzDO Agent User"
    user:
      name: "{{ azdo_agent_user }}"
      group: docker
      home: "/opt/{{ azdo_agent_user }}"
      shell: /bin/false
      system: true
    when: azdo_agent_install | bool
    
  - name: "Install AzDO Agent"
    shell: 
      cmd: |
        curl "https://vstsagentpackage.azureedge.net/agent/{{ azdo_agent_agent_version }}/vsts-agent-linux-x64-{{ azdo_agent_agent_version }}.tar.gz" -o /tmp/agent.tar.gz
        tar xf /tmp/agent.tar.gz
        chown -R {{ azdo_agent_user }}:{{ azdo_agent_user }} .
        ./bin/installdependencies.sh
      chdir: "/opt/{{ azdo_agent_user }}"
      creates: "/opt/{{ azdo_agent_user }}/config.sh"
    args:
      # Suppress warnings from running curl
      warn: false
    when: azdo_agent_install | bool

  - name: "Register AzDO Agent"
    shell: 
      cmd: ./config.sh --unattended --acceptTeeEula --replace
      chdir: "/opt/{{ azdo_agent_user }}"
      creates: "/opt/{{ azdo_agent_user}}/.agent"
    environment:
      azdo_agent_AGENT_INPUT_TOKEN: "{{ azdo_agent_token }}"
      azdo_agent_AGENT_INPUT_AUTH: "pat"
      azdo_agent_AGENT_INPUT_URL: "{{ azdo_agent_organization_url }}"
      azdo_agent_AGENT_INPUT_POOL: "{{ azdo_agent_agent_pool }}"
    become: yes
    become_user: "{{ azdo_agent_user }}"
    when:
    - azdo_agent_install | bool
    - azdo_agent_organization is defined
    - azdo_agent_token is defined
  - name: "Configure AzDO Agent"
    shell:
      cmd: "./svc.sh install {{ azdo_agent_user }}"
      chdir: "/opt/{{ azdo_agent_user }}"
      creates: "/opt/{{ azdo_agent_user }}/.service"
    when:
    - azdo_agent_install | bool
    - azdo_agent_organization is defined
    - azdo_agent_token is defined
    register: azdo_agent_service
  - name: "Reboot"
    reboot:
    when: azdo_agent_service is changed
