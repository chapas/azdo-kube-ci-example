#############################################################
# Terraform Destroy Stage
#
# This template contains a stage to perform a Terraform
# Destroy operation.
#############################################################
parameters:
- name: 'terraformVersion'
  type: 'string'
  default: '0.12.25'
- name: 'terraformWorkingDirectory'
  type: 'string'
  default: '$(Build.Repository.LocalPath)'
- name: 'azureSubscription'
  type: 'string'
  default: ''
- name: 'terraformStorageAccount'
  type: 'string'
  default: ''
- name: 'sasTokenDuration'
  type: 'string'
  default: '2 hours'
- name: 'terraformWorkspace'
  type: 'string'
  default: ''
- name: 'terraformInputVariables'
  type: 'object'
  default: {}
- name: 'planDestroy'
  type: 'string'
  default: 'false'
- name: 'applyDestroy'
  type: 'string'
  default: 'false'

stages:
- stage: 'runTerraformDestroy'
  displayName: 'Run Terraform Destroy'
  condition: succeeded()
  variables:
    TF_IN_AUTOMATION: true
    planDestroy: '${{ parameters.planDestroy }}'
    applyDestroy: '${{ parameters.applyDestroy }}'

  jobs:
  - job: 'validateDestroyConfiguration'
    displayName: 'Validate Destroy Configuration'

    steps:
    - checkout: 'none'
    - task: Bash@3
      name: 'validateDestroyConfiguration'
      displayName: 'Validate Destroy Configuration'
      inputs:
        targetType: 'inline'
        script: |
          if [ -z "$azureSubscription" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"azureSubscription\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$terraformStorageAccount" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"terraformStorageAccount\""
            echo "##vso[task.complete result=Failed]"
          fi
      env:
        azureSubscription: '${{ parameters.azureSubscription }}'
        terraformStorageAccount: '${{ parameters.terraformStorageAccount }}'

  - job: 'runTerraformDestroy'
    displayName: 'Run Terraform Destroy'
    dependsOn: 'validateDestroyConfiguration'
    condition: succeeded('validateDestroyConfiguration')
    workspace:
      clean: all

    steps:
    - template: terraformInit.tpl.steps.yml
      parameters:
        terraformVersion: '${{ parameters.terraformVersion }}'
        terraformWorkingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        azureSubscription: '${{ parameters.azureSubscription }}'
        terraformStorageAccount: '${{ parameters.terraformStorageAccount }}'
        sasTokenDuration: '${{ parameters.sasTokenDuration }}'
        terraformWorkspace: '${{ parameters.terraformWorkspace }}'

    - task: Bash@3
      name: 'terraformPlanDestroy'
      displayName: 'Terraform Plan (Destroy)'
      condition: and(succeeded(), eq(variables.planDestroy, 'true'))
      inputs:
        targetType: 'inline'
        script: |
          if [ -z "$terraformWorkspace" ]; then
            terraform plan -destroy -out tf.destroy.plan
          else
            terraform plan -destroy -out tf.destroy.plan -var-file tfvars/$terraformWorkspace.tfvars
          fi
        workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
      env:
        ARM_TENANT_ID: '$(ARM_TENANT_ID)'
        ARM_SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
        ARM_CLIENT_ID: '$(ARM_CLIENT_ID)'
        ARM_CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
        ARM_SAS_TOKEN: '$(ARM_SAS_TOKEN)'
        terraformWorkspace: '${{ variables.terraformWorkspace }}'
        ${{ each item in parameters.terraformInputVariables }}:
          TF_VAR_${{ item.key }}: ${{ item.value }}

    - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - task: Bash@3
        name: 'terraformApplyDestroy'
        displayName: 'Terraform Apply (Destroy)'
        condition: and(succeeded(), eq(variables.planDestroy, 'true'), eq(variables.applyDestroy, 'true'))
        inputs:
          targetType: 'inline'
          script: |
            if [ -z "$terraformWorkspace" ]; then
              terraform destroy -auto-approve
            else
              terraform destroy -auto-approve -var-file tfvars/$terraformWorkspace.tfvars
            fi
          workingDirectory: '${{ parameters.terraformWorkingDirectory }}'
        env:
          ARM_TENANT_ID: '$(ARM_TENANT_ID)'
          ARM_SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
          ARM_CLIENT_ID: '$(ARM_CLIENT_ID)'
          ARM_CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
          ARM_SAS_TOKEN: '$(ARM_SAS_TOKEN)'
          terraformWorkspace: '${{ variables.terraformWorkspace }}'
          ${{ each item in parameters.terraformInputVariables }}:
            TF_VAR_${{ item.key }}: ${{ item.value }}
