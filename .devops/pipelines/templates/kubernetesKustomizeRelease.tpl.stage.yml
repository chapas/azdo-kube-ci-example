#############################################################
# Kubernetes Kustomize Deploy Stage
#
# This template contains a stage to perform a Kubernetes
# Deploy operation to a defined environment.
#############################################################
parameters:
- name: 'kubectlVersion'
  type: 'string'
  default: '1.18.0'
- name: 'appName'
  type: 'string'
  default: ''
- name: appDomain
  type: 'string'
  default: ''
- name: 'appContainerImage'
  type: 'string'
  default: ''
- name: 'appKustomizePath'
  type: 'string'
  default: ''
- name: 'kubernetesEnvironment'
  type: 'string'
  default: ''
- name: 'kubernetesResource'
  type: 'string'
  default: ''

stages:
- stage: 'deployToKubernetesCluster'
  displayName: 'Deploy to the Kubernetes cluster'
  condition: succeeded()

  jobs:
  - job: 'validateReleaseConfiguration'
    displayName: 'Validate Release Configuration'

    steps:
    - checkout: 'none'
    - task: Bash@3
      name: 'validateReleaseConfiguration'
      displayName: 'Validate Release Configuration'
      inputs:
        targetType: 'inline'
        script: |
          if [ -z "$appName" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"appName\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$appDomain" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"appDomain\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$appContainerImage" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"appContainerImage\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$appKustomizePath" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"appKustomizePath\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$kubernetesEnvironment" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"kubernetesEnvironment\""
            echo "##vso[task.complete result=Failed]"
          fi

          if [ -z "$kubernetesResource" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"kubernetesResource\""
            echo "##vso[task.complete result=Failed]"
          fi
      env:
        appName: '${{ parameters.appName }}'
        appDomain: '${{ parameters.appDomain }}'
        appContainerImage: '${{ parameters.appContainerImage }}'
        appKustomizePath: '${{ parameters.appKustomizePath }}'
        kubernetesEnvironment: '${{ parameters.kubernetesEnvironment }}'
        kubernetesResource: '${{ parameters.kubernetesResource }}'

  - deployment: 'deployToKubernetes'
    displayName: 'Deploy to Kubernetes'
    environment: '${{ parameters.kubernetesEnvironment }}.${{ parameters.kubernetesResource }}'
    dependsOn: 'validateReleaseConfiguration'
    condition: succeeded('validateReleaseConfiguration')

    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubectlInstaller@0
            name: 'install'
            displayName: 'Install Kubectl'
            inputs:
              kubectlVersion: '${{ parameters.kubectlVersion }}'
              
          - task: Bash@3
            name: 'kustomize'
            displayName: 'Set up Kustomize file using yq'
            inputs:
              targetType: 'inline'
              script: |
                yq write --inplace kustomization.yaml 'namePrefix' "${appName}-"
                yq write --inplace kustomization.yaml 'commonLabels.app' "${appName}"
                yq write --inplace kustomization.yaml 'images[0].newName' "${appContainerImage}"
                yq write --inplace kustomization.yaml 'images[0].newTag' "${appContainerTag}"

                yq write --inplace ingress.yaml 'spec.rules[0].host' "${appDomain}"
              workingDirectory: '${{ parameters.appKustomizePath }}'
            env:
              appName: '${{ parameters.appName }}'
              appContainerImage: '${{ parameters.appContainerImage }}'
              appContainerTag: '$(Build.SourceBranchName)-$(Build.BuildId)'
              appDomain: '${{ parameters.appName }}.${{ parameters.appDomain }}'
          - task: KubernetesManifest@0
            name: 'bake'
            displayName: 'Bake Kubernetes Manifests'
            inputs:
              action: 'bake'
              renderType: 'kustomize'
              kustomizationPath: '${{ parameters.appKustomizePath }}'
          - task: KubernetesManifest@0
            name: 'deploy'
            displayName: 'Deploy Kubernetes Manifests'
            inputs:
              action: 'deploy'
              namespace: '${{ parameters.kubernetesResource }}'
              manifests: '$(bake.manifestsBundle)'
