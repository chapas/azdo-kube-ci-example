#############################################################
# NodeJS NPM Test
#
# This template contains a stage to perform a lint and test
# operation with NPM.
#############################################################
parameters:
- name: 'nodeVersion'
  type: 'string'
  default: '10.x'
- name: 'appName'
  type: 'string'
  default: ''
- name: 'appBasePath'
  type: 'string'
  default: '$(Build.Repository.LocalPath)'
- name: 'resultFormat'
  type: 'string'
  default: 'JUnit'
- name: 'lintResultsFile'
  type: 'string'
  default: 'lint-results.xml'
- name: 'testResultsFile'
  type: 'string'
  default: 'test-results.xml'

stages:
- stage: 'testNodeJsApplication'
  displayName: 'Test NodeJS Application'
  condition: succeeded()

  jobs:
  - job: 'validateTestConfig'
    displayName: 'Validate Test configuration'
    steps:
    - checkout: 'none'
    - task: Bash@3
      name: 'validateTestConfig'
      displayName: 'Validate Test configuration'
      inputs:
        targetType: 'inline'
        script: |
          if [ -z "$appName" ]; then
            echo "##vso[task.logissue type=error]Missing or empty template parameter \"appName\""
            echo "##vso[task.complete result=Failed]"
          fi
      env:
        appName: '${{ parameters.appName }}'

  - job: 'lintTest'
    displayName: 'Run Lint Test'
    dependsOn: 'validateTestConfig'
    condition: succeeded('validateTestConfig')

    steps:
    - task: UseNode@1
      inputs:
        version: '${{ parameters.nodeVersion }}'

    - task: Bash@3
      name: 'runLintCi'
      displayName: 'Run lint:ci'
      inputs:
        targetType: 'inline'
        script: 'npm ci; npm run lint:ci'
        workingDirectory: '${{ parameters.appBasePath }}'
    - task: PublishTestResults@2
      name: 'publishLintingResults'
      displayName: 'Publish Linting Results'
      condition: succeededOrFailed()
      inputs:
        testRunTitle: '${{ parameters.appName }} Linting'
        failTaskOnFailedTests: true
        buildConfiguration: '${{ parameters.appName}}:$(Build.SourceBranchName)-$(Build.BuildId)'
        testResultsFormat: '${{ parameters.resultFormat }}'
        testResultsFiles: '${{ parameters.appBasePath }}/${{ parameters.lintResultsFile }}'

  - job: 'unitTest'
    displayName: 'Run Unit Test'
    dependsOn: 'validateTestConfig'
    condition: succeeded('validateTestConfig')

    steps:
    - task: UseNode@1
      inputs:
        version: '${{ parameters.nodeVersion }}'

    - task: Bash@3
      name: 'runTestCi'
      displayName: 'Run test:ci'
      inputs:
        targetType: 'inline'
        script: 'npm ci; npm run test:ci'
        workingDirectory: '${{ parameters.appBasePath }}'
    - task: PublishTestResults@2
      name: 'publishUnitTestResults'
      displayName: 'Publish Unit Test Results'
      condition: succeededOrFailed()
      inputs:
        testRunTitle: '${{ parameters.appName }} Unit Test'
        failTaskOnFailedTests: true
        buildConfiguration: '${{ parameters.appName}}:$(Build.SourceBranchName)-$(Build.BuildId)'
        testResultsFormat: '${{ parameters.resultFormat }}'
        testResultsFiles: '${{ parameters.appBasePath }}/${{ parameters.testResultsFile }}'
